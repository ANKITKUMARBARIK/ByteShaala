# This file tells Docker "start all these services together"
# whenever we create compose file we don't need to create network manually by default they are referencing each other.
version: '3.8'

services:
  mongodb:
    image: "mongo"
    container_name: mongo-container #name of container
    ports:
      - 27017:27017 #port mapping
    volumes:
      - mongodb_data:/data/db #attach volume
    healthcheck:
      test: ["CMD", "mongo", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 40s

  rabbitmq:
    image: "rabbitmq:3-management"
    container_name: rabbitmq-container
    ports:
      - 5672:5672
      - 15672:15672
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 40s

  auth-service:
    build: ./auth-service
    container_name: auth-service-container
    ports:
      - 5001:5001
    depends_on:
      rabbitmq:
        condition: service_healthy
      mongodb:
        condition: service_started
    environment:
      MONGODB_URI: "mongodb://mongodb:27017/auth-service"
      RABBITMQ_URL: "amqp://rabbitmq:5672"
      PORT: "5001"
      NODE_ENV: "development"
      ACCESS_TOKEN_SECRET: "muSXtkpbKIhLymEblzzVefFjgAoBBIZdg0E70rEGh4TptgGtsJExrpY4wRvR9BiK"
      ACCESS_TOKEN_EXPIRY: "1d"
      REFRESH_TOKEN_SECRET: "Q44EVvuve7RlsuvafmDw2jVxVG47HOmYMfoiRSkyiEmipb20CTRFBh8oEhxjcoO6"
      REFRESH_TOKEN_EXPIRY: "10d"
      ADMIN_EMAIL: "admin.dev@gmail.com"
      ADMIN_PASSWORD: "123456"  

  user-service:
    build: ./user-service
    container_name: user-service-container
    ports:
      - 5002:5002
    depends_on:
      rabbitmq:
        condition: service_healthy
      mongodb:
        condition: service_started
    environment:
      MONGODB_URI: "mongodb://mongodb:27017/user-service"
      RABBITMQ_URL: "amqp://rabbitmq:5672"
      PORT: "5002"
      NODE_ENV: "development"
      CLOUDINARY_CLOUD_NAME: "ankitkumarbarik"
      CLOUDINARY_API_KEY: "118319496188455"
      CLOUDINARY_API_SECRET: "MXq_-Et-TEleocE55oGGZuWN3QU"  

  notification-service:
    build: ./notification-service
    container_name: notification-service-container
    ports:
      - 5005:5005
    depends_on:
      rabbitmq:
        condition: service_healthy
    environment:
      MONGODB_URI: "mongodb://mongodb:27017/notification-service"
      RABBITMQ_URL: "amqp://rabbitmq:5672"
      PORT: "5005"
      NODE_ENV: "development"
      FRONTEND_BASE_URL: "http://localhost:5173"

  course-service:
    build: ./course-service
    container_name: course-service-container
    ports:
      - 5003:5003
    depends_on:
      rabbitmq:
        condition: service_healthy
      mongodb:
        condition: service_started
    environment:
      MONGODB_URI: "mongodb://mongodb:27017/course-service"
      RABBITMQ_URL: "amqp://rabbitmq:5672"
      PORT: "5003"
      NODE_ENV: "development"
      CLOUDINARY_CLOUD_NAME: "ankitkumarbarik"
      CLOUDINARY_API_KEY: "118319496188455"
      CLOUDINARY_API_SECRET: "MXq_-Et-TEleocE55oGGZuWN3QU"    
      
  api-gateway:
    build: ./api-gateway
    container_name: api-gateway-container
    ports:
      - 8888:8888
    depends_on:
      - auth-service
      - user-service
    environment:
      PORT: "8888"
      AUTH_SERVICE: "http://auth-service:5001"
      USER_SERVICE: "http://user-service:5002"

#create volume    
volumes:
      mongodb_data: